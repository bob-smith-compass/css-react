/* .App {
  text-align: center;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 40vmin;
  pointer-events: none;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
} */

/**
* CSS Grid
* CSS Grid Layout is the most powerful layout system available in CSS. It is a 2-dimensional system, meaning it can handle both columns and rows, unlike flexbox which is largely a 1-dimensional system. 
* Properties for the Grid Container

display
grid-template-columns
grid-template-rows
grid-template-areas
grid-template
grid-column-gap
grid-row-gap
grid-gap
justify-items
align-items
place-items
justify-content
align-content
place-content
grid-auto-columns
grid-auto-rows
grid-auto-flow
grid

* Properties for the Grid Items

grid-column-start
grid-column-end
grid-row-start
grid-row-end
grid-column
grid-row
grid-area
justify-self
align-self
place-self

* 
* If you are interested in using the JavaScript components that ship with Bootstrap, you need to place the following <script> tags near the end of your pages, right before the closing </body> tag, to enable them.
* 
* grid - generates a block-level grid
* inline-grid - generates an inline-level grid

*/
.mgrid {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr 1fr;
  grid-column-gap: 15px; 
  grid-row-gap: 20px; 
  /* grid-template-rows: auto 100px 25%; */

}
.mgrid-inline {
  display: inline-grid;
  grid-template-columns: 1fr 2fr 1fr 1fr;
  grid-column-gap: 15px; 
  grid-row-gap: 20px; 
  /* grid-row-gap: 100%; */

}
.item {
  border: solid 1px gray;
  background-color: antiquewhite;
}
.chat {
  min-height: 100%;
}